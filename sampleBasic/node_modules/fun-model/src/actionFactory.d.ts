import * as s from './store';
export declare const bootstrap: (onStateChanged: (() => void) | null, withExceptionHandling?: boolean | (() => boolean)) => void;
export interface IAction<T> {
    (param?: T): void;
}
export declare type IActionHandler<TState extends s.IState, TParams> = (state: TState, t?: TParams) => TState;
export declare const createAction: <TState extends s.IState, TParams>(cursor: s.ICursor<TState> | s.ICursorFactory<TState, TParams>, handler?: (state: TState, t?: TParams | undefined) => TState) => IAction<TParams>;
export interface IPair<TState extends s.IState, TParam> {
    cursor: s.ICursor<TState>;
    handler: (state: TState, t?: TParam) => TState;
}
export declare const createActions: <TState extends s.IState, TParams>(...pairs: IPair<TState, TParams>[]) => IAction<TParams>;
