"use strict";
var h = require('../src/helpers');
describe('helpers', function () {
    describe('shallowCopy', function () {
        var aState;
        beforeEach(function () {
            aState = {
                id: 'anId',
                list: [1, 2, 3],
                subObject: {
                    id: 'anSubId'
                }
            };
        });
        describe('on object', function () {
            it('copies all values', function () {
                var newState = h.shallowCopy(aState);
                expect(newState.id).toBe(aState.id);
                expect(newState.subObject.id).toBe(aState.subObject.id);
                expect(newState.list.length).toBe(aState.list.length);
            });
            it('returns new object', function () {
                var newState = h.shallowCopy(aState);
                expect(newState).not.toBe(aState);
            });
            it('returns original sub objects', function () {
                var newState = h.shallowCopy(aState);
                expect(newState.subObject).toBe(aState.subObject);
                expect(newState.list).toBe(aState.list);
            });
            it('sets properties in callback without return', function () {
                var newState = h.shallowCopy(aState, function (s) {
                    s.id = 'newId';
                    s.subObject = { id: 'newSubId' };
                });
                expect(newState.id).toBe('newId');
                expect(newState.subObject).toEqual({ id: 'newSubId' });
            });
            it('sets properties in nested shallowCopy', function () {
                var newState = h.shallowCopy(aState, function (s) { return h.shallowCopy(s, function (a) {
                    a.id = 'newId';
                    a.subObject = { id: 'newSubId' };
                    return a;
                }); });
                expect(newState.id).toBe('newId');
                expect(newState.subObject).toEqual({ id: 'newSubId' });
            });
            it('sets properties in inline style', function () {
                var newState = h.shallowCopy(aState, function (s) {
                    s.id = 'newId';
                    s.subObject = { id: 'newSubId' };
                });
                expect(newState.id).toBe('newId');
                expect(newState.subObject).toEqual({ id: 'newSubId' });
            });
        });
        describe('on array', function () {
            var newState;
            beforeEach(function () {
                newState = h.shallowCopy(aState, function (ns) {
                    ns.list = h.shallowCopy(ns.list);
                });
            });
            it('creates instance of array', function () {
                expect(Array.isArray(newState.list)).toBeTruthy();
            });
            it('has same length', function () {
                expect(newState.list.length).toBe(aState.list.length);
            });
            it('has all own properties/values', function () {
                for (var key in newState.list) {
                    if (newState.list.hasOwnProperty(key) && typeof key !== 'function') {
                        expect(newState.list[key]).toBe(aState.list[key]);
                    }
                }
            });
        });
    });
    describe('deepFreeze', function () {
        var state;
        beforeEach(function () {
            state = {
                id: 'anId',
                list: [1, 2, 3],
                subObject: {
                    id: 'anSubId'
                }
            };
            h.deepFreeze(state);
        });
        it('freezes root object', function () {
            expect(Object.isFrozen(state)).toBeTruthy();
        });
        it('freezes nested object', function () {
            expect(Object.isFrozen(state.subObject)).toBeTruthy();
        });
        it('freezes nested array', function () {
            expect(Object.isFrozen(state.list)).toBeTruthy();
        });
    });
});
