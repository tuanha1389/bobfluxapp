"use strict";
var b = require("bobril");
var g = require("bobril-g11n");
var m = require("bobril-m");
var fg = require("bobril-flexbox-grid");
var f = require("../flux");
exports.createUserAccountPage = f.createRouteComponent({
    render: function (ctx, me) {
        me.children = [
            createFields(ctx),
            createButtons(ctx)
        ];
    }
});
function createFields(ctx) {
    return [
        fg.Row({
            children: fg.Col({
                md: 12,
                children: m.TextField({
                    disabled: !ctx.state.isEditingEnabled,
                    // hintText: g.t("Email:"),
                    value: ctx.state.isEditingEnabled && ctx.state.editedUserInfo ? ctx.state.editedUserInfo.email : ctx.userInfoState.email
                })
            })
        }),
        fg.Row({
            children: [
                fg.Col({
                    md: 6,
                    children: m.TextField({
                        disabled: !ctx.state.isEditingEnabled,
                        // hintText: g.t("Name:"),
                        value: ctx.state.isEditingEnabled && ctx.state.editedUserInfo ? ctx.state.editedUserInfo.name : ctx.userInfoState.name
                    })
                }),
                fg.Col({
                    md: 6,
                    children: m.TextField({
                        disabled: !ctx.state.isEditingEnabled,
                        // hintText: g.t("Surname:"),
                        value: ctx.state.isEditingEnabled && ctx.state.editedUserInfo ? ctx.state.editedUserInfo.surName : ctx.userInfoState.surName
                    })
                })
            ]
        })
    ];
}
function createButtons(ctx) {
    return b.withKey(fg.Row({
        children: fg.Col({
            xsOffset: 10,
            children: [
                m.Button({
                    disabled: !!ctx.state.editedUserInfo,
                    type: 1 /* Raised */,
                    feature: ctx.state.editedUserInfo ? 2 /* Secondary */ : 1 /* Primary */,
                    children: g.t("Edit"),
                    action: function () { }
                }),
                m.Button({
                    disabled: !!ctx.state.editedUserInfo,
                    type: 1 /* Raised */,
                    feature: !ctx.state.editedUserInfo ? 2 /* Secondary */ : 1 /* Primary */,
                    children: g.t("Cancel"),
                    action: function () { }
                })
            ]
        })
    }), "buttons");
}
